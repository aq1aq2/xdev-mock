<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:osgi="http://www.springframework.org/schema/osgi"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                      http://www.springframework.org/schema/beans/spring-beans.xsd
                      http://www.springframework.org/schema/osgi
                      http://www.springframework.org/schema/osgi/spring-osgi.xsd
                      http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!-- Camel JMSProducer to be able to send messages to a remote Active MQ server -->
    <!-- Indicates the how the JMS Message will be stored. -->
    <bean id="jms2" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="brokerURL" value="${queue.url}"/>
    </bean>

    <!-- One way of trying to have a route done at a specified time. -->
    <bean id="date" class="java.util.Date"/>

     <bean id="startPolicy" class="org.apache.camel.routepolicy.quartz.SimpleScheduledRoutePolicy">
         <property name="routeStartDate" ref="date"/>
         <property name="routeStartRepeatCount" value="0"/>
         <property name="routeStartRepeatInterval" value="${queue.timeout}"/>
     </bean>

    <camel:camelContext id="jmsProducerCamelContextNotificationMessage">
        <camel:template id="jmsProducerNotificationMessage" defaultEndpoint="epNotifications"/>
        <!--<camel:consumerTemplate id="jmsConsumerNotificationMessage" />-->

        <camel:endpoint id="epNotifications" uri="jms2:queue:notifications?exchangePattern=InOnly"/>

        <!-- Delay will keep servicemix from closing down. -->
        <!-- Timer to have us check to see if the queued notifications can be sent. -->
        <!-- Route definition is constantly be run.  Multiple times in a second. -->
        <camel:route id="RetryTimerRoute" trace="true" routePolicyRef="startPolicy">
            <!--<camel:from uri="timer://foo?fixedRate=true&amp;period=30000"/>-->      <!-- Timer to have us check to see if the queued notifications can be sent. -->
            <!--<camel:from uri="quartz://myTimer?trigger.repeatInterval=30000&amp;stateful=true" />-->  <!-- Timer to have us check to see if the queued notifications can be sent. -->
            <camel:from uri="jms2:queue:notifications"/>
            <camel:log message="${body}"/>
            <camel:delay asyncDelayed="false"><!-- Only get messages from the queue after waiting this long. -->
                <camel:constant>${queue.timeout}</camel:constant>
            </camel:delay>
        </camel:route>

    </camel:camelContext>


</beans>