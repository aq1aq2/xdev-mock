<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1253">
<link href="ff.css" rel="stylesheet" type="text/css">
</head><body>
<table border="0" cellpadding="10" cellspacing="0" class="cover">
  <tr>
<td><img src="Pictures/cover.jpg"></td>
<td><h1>Design Patterns<br>
    <span class="sub">Elements of Reusable Object-Oriented Software</span></h1>
  <p>by Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides</p>
  <p>Addison-Wesley Pub Co; 1st edition (January 15, 1995)</p>
<p>chm by ff</p>
<hr>
<h3>Preface to Book</h3>
<p>This book isn't an introduction to object-oriented technology or design. Many books already do a good job of that. This book assumes you are reasonably proficient in at least one object-oriented programming language, and you should have some experience in object-oriented design as well. You definitely shouldn't have to rush to the nearest dictionary the moment we mention "types" and "polymorphism," or "interface" as opposed to "implementation" inheritance.
  
  <p>On the other hand, this isn't an advanced technical treatise either. It's a book of <b>design patterns</b> that describes simple and elegant solutions to specific problems in object-oriented software design. Design patterns capture solutions that have developed and evolved over time. Hence they aren't the designs people tend to generate initially. They reflect untold redesign and recoding as developers have struggled for greater reuse and flexibility in their software. Design patterns capture these solutions in a succinct and easily applied form.
  
  <p>The design patterns require neither unusual language features nor amazing programming tricks with which to astound your friends and managers. All can be implemented in standard object-oriented languages, though they might take a little more work than <em>ad hoc</em> solutions. But the extra effort invariably pays dividends in increased flexibility and reusability.
  
  <p>Once you understand the design patterns and have had an "Aha!" (and not just a "Huh?") experience with them, you won't ever think about object-oriented design in the same way. You'll have insights that can make your own designs more flexible, modular, reusable, and understandable&#151;which is why you're interested in object-oriented technology in the first place, right?
  
  <p>A word of warning and encouragement: Don't worry if you don't understand this book completely on the first reading. We didn't understand it all on the first writing! Remember that this isn't a book to read once and put on a shelf. We hope you'll find yourself referring to it again and again for design insights and for inspiration.
  
  <p>This book has had a long gestation. It has seen four countries, three of its authors' marriages, and the birth of two (unrelated) offspring. Many people have had a part in its development. Special thanks are due Bruce Anderson, Kent Beck, and Andr&#233; Weinand for their inspiration and advice. We also thank those who reviewed drafts of the manuscript: Roger Bielefeld, Grady Booch, Tom Cargill, Marshall Cline, Ralph Hyre, Brian Kernighan, Thomas Laliberty, Mark Lorenz, Arthur Riel, Doug Schmidt, Clovis Tondo, Steve Vinoski, and Rebecca Wirfs-Brock. We are also grateful to the team at Addison-Wesley for their help and patience: Kate Habib, Tiffany Moore, Lisa Raffaele, Pradeepa Siva, and John Wait. Special thanks to Carl Kessler, Danny Sabbah, and Mark Wegman at IBM Research for their unflagging support of this work.
  
  <p>Last but certainly not least, we thank everyone on the Internet and points beyond who commented on versions of the patterns, offered encouraging words, and told us that what we were doing was worthwhile. These people include but are not limited to Jon Avotins, Steve Berczuk, Julian Berdych, Matthias Bohlen, John Brant, Allan Clarke, Paul Chisholm, Jens Coldewey, Dave Collins, Jim Coplien, Don Dwiggins, Gabriele Elia, Doug Felt, Brian Foote, Denis Fortin, Ward Harold, Hermann Hueni, Nayeem Islam, Bikramjit Kalra, Paul Keefer, Thomas Kofler, Doug Lea, Dan LaLiberte, James Long, Ann Louise Luu, Pundi Madhavan, Brian Marick, Robert Martin, Dave McComb, Carl McConnell, Christine Mingins, Hanspeter M&#246;ssenb&#246;ck, Eric Newton, Marianne Ozkan, Roxsan Payette, Larry Podmolik, George Radin, Sita Ramakrishnan, Russ Ramirez, Alexander Ran, Dirk Riehle, Bryan Rosenburg, Aamod Sane, Duri Schmidt, Robert Seidl, Xin Shu, and Bill Walker.
  

  
  <p>We don't consider this collection of design patterns complete and static; it's more a recording of our current thoughts on design. We welcome comments on it, whether criticisms of our examples, references and known uses we've missed, or design patterns we should have included. You can write us care of Addison-Wesley, or send electronic mail to <tt>design-patterns@cs.uiuc.edu</tt>. You can also obtain softcopy for the code in the Sample Code sections by sending the message "send design pattern source" to <tt>design-patterns-source@cs.uiuc.edu</tt>. And now there's a Web at <a href="http://st-www.cs.uiuc.edu/users/patterns/DPBook/DPBook.html" target="_top">http://st-www.cs.uiuc.edu/users/patterns/DPBook/DPBook.html</a> for late-breaking information and updates.</p>
<p><em>Mountain View, California, E.G.<br>
  Montreal, Quebec, R.H.<br>
  Urbana, Illinois, R.J.<br>
  Hawthorne, New York, J.V.</em></p>
<p><em>August 1994</em></p>
<h3>Preface to CD</h3>
<p>As we were writing <em>Design Patterns</em>, we knew the patterns we were describing had value because they had proven themselves in many different contexts. Our hope was that other software engineers would benefit from these patterns as much as we had.</p>
<p>Now, three years after its debut, we find ourselves both grateful and thrilled by how the book has been received. Lots of people use it. Many tell us the patterns have helped them design and build better systems. Many others have been inspired to write their own patterns, and the pool of patterns is growing. And many have commented on what might be improved about the book and what they would like to see in the future.</p>
<p>A recurring comment in all the feedback has been how well-suited the book is to hypertext. There are numerous cross-references, and chasing references is something a computer can do very well. Since much of the software development process takes place on computers, it would be natural to have a book like ours as an on-line resource. Observations like these got us excited about the potential of this medium. So when Mike Hendrickson approached us about turning the book into a CD-ROM, we jumped at the chance.</p>
<p>Two years and several megabytes of e-mail later, we're delighted that you can finally obtain this edition, the <em>Design Patterns CD</em>, and put its unique capabilities to work. Now you can access a pattern from your computer even when someone has borrowed your book. You can search the text for key words and phrases. It's also considerably easier to incorporate parts of it in your own on-line documentation. And if you travel with a notebook computer, you can keep the book handy without lugging an extra two pounds of paper.</p>
<p>Hypertext is a relatively new publishing venue, one we are learning to use just like everyone else. If you have ideas on how to improve this edition, please send them to design-patterns-cd@cs.uiuc.edu. If you have questions or suggestions concerning the patterns themselves, send them to the gang-of-4-patterns@cs.uiuc.edu mailing list. (To subscribe, send e-mail to gang-of-4-patterns@cs.uiuc.edu with the subject "subscribe".) This list has quite a few readers, and many of them can answer questions as well as we can&#151;and usually a lot faster! Also, be sure to check out the Patterns Home at <a href="http://hillside.net/patterns/" target="_top">http://hillside.net/patterns/</a>. There you'll find other books and mailing lists on patterns, not to mention conference information and patterns published on-line.</p>
<p>This CD entailed considerable design and implementation work. We are indebted to Mike Hendrickson and the team at Addison-Wesley for their on-going encouragement and support. Jeff Helgesen, Jason Jones, and Daniel Savarese garner many thanks for their development effort and for patience despite what must appear to have been our insatiable appetite for revision. A special acknowledgment is due IBM Research, which continues to underwrite much of this activity. We also thank the reviewers, including Robert Brunner, Sandeep Dani, Bob Koss, Scott Meyers, Stefan Schulz, and the Patterns Discussion Group at the University of Illinois Urbana-Champaign. Their advice led to at least one major redesign and several minor ones.</p>
<p>Finally, we thank all who have taken time to comment on <em>Design Patterns</em>. Your feedback has been invaluable to us as we strive to better our understanding and presentation of this material.</p>
<p><em>Zurich, Switzerland,</em> E.G. <br>
    <em>Sydney, Australia, R.H.<br>
  Urbana, Illinois, R.J.<br>
  Hawthorne, New York, J.V.</em></p>
<p><em>August 1997</em></p>   <h3>About the Authors</h3>
<p>The authors are internationally recognized experts in the object-oriented software field. Dr. Erich Gamma is technical director at the Software Technology Center of Object Technology International in Zurich, Switzerland. Dr. Richard Helm is a member of the Object Technology Practice Group in the IBM Consulting Group in Sydney, Australia. Dr. Ralph Johnson is a faculty member at the University of Illinois at Urbana-Champaign's Computer Science Department. Dr. John Vlissides conducts his research at IBM's Thomas J. Watson Research Center in Hawthorne, New York.</p>   <h3>Guide to Readers</h3>
<p>This book has two main parts. The first part (Chapters 1 and 2) describes what design patterns are and how they help you design object-oriented software. It includes a design case study that demonstrates how design patterns apply in practice. The second part of the book (Chapters 3, 4, and 5) is a catalog of the actual design patterns.
  
  <p>The catalog makes up the majority of the book. Its chapters divide the design patterns into three types: creational, structural, and behavioral. You can use the catalog in several ways. You can read the catalog from start to finish, or you can just browse from pattern to pattern. Another approach is to study one of the chapters. That will help you see how closely related patterns distinguish themselves.
  
  <p>You can use the references between the patterns as a logical route through the catalog. This approach will give you insight into how patterns relate to each other, how they can be combined with other patterns, and which patterns work well together. Figure 1.1 depicts these references graphically.
  
  <p>Yet another way to read the catalog is to use a more problem-directed approach. Skip to Section 1.6 to read about some common problems in designing reusable object-oriented software; then read the patterns that address these problems. Some people read the catalog through first and <em>then</em> use a problem-directed approach to apply the patterns to their projects.
  
  <p>If you aren't an experienced object-oriented designer, then start with the simplest and most common patterns:
  
  <ul>
  <li>Abstract Factory
  <li>Adapter 
  <li>Composite 
  <li>Decorator 
  <li>Factory Method 
  <li>Observer 
  <li>Strategy 
  <li>Template Method </ul>
<p>It's hard to find an object-oriented system that doesn't use at least a couple of these patterns, and large systems use nearly all of them. This subset will help you understand design patterns in particular and good object-oriented design in general</p>    </td>
  </tr>
</table>
</body>
</html>
