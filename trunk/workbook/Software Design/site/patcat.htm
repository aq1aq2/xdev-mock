<html><head>	<title>Pattern Catalog</title><link href="ff.css" rel="stylesheet" type="text/css"></head><body>
<h2>Pattern Catalog</h2>
<h3>
Creational Patterns</h3><dl>
<dt><b>Abstract Factory </b>
<dd>Provide an interface for creating families of related or dependent
objects without specifying their concrete classes.<dt><b>Builder </b>
<dd>Separate the construction of a complex object from its representation
so that the same construction process can create different
representations.
<dt><b>Factory Method </b>
<dd>Define an interface for creating an object, but let subclasses decide
which class to instantiate. Factory Method lets a class defer
instantiation to subclasses.
<dt><b>Prototype </b>
<dd>Specify the kinds of objects to create using a prototypical
instance, and create new objects by copying this prototype.
<dt><b>Singleton </b>
<dd>Ensure a class only has one instance, and provide a global point
of access to it.</dl>
<h3>
Structural Patterns</h3><dl>
<dt><b>Adapter </b>
<dd>Convert the interface of a class into another interface clients
expect.  Adapter lets classes work together that couldn't otherwise
because of incompatible interfaces.<dt><b>Bridge </b>
<dd>Decouple an abstraction from its implementation so that the two
can vary independently.<dt><b>Composite </b>
<dd>Compose objects into tree structures to represent part-whole
hierarchies.  Composite lets clients treat individual objects and
compositions of objects uniformly.
<dt><b>Decorator </b>
<dd>Attach additional responsibilities to an object dynamically.
Decorators provide a flexible alternative to subclassing for extending
functionality.
<dt><b>Facade </b>
<dd>Provide a unified interface to a set of interfaces in a subsystem.
Facade defines a higher-level interface that makes the subsystem
easier to use.
<dt><b>Flyweight </b>
<dd>Use sharing to support large numbers of fine-grained objects efficiently.
<dt><b>Proxy </b>
<dd>Provide a surrogate or placeholder for another object to control
access to it.</dl>
<h3>
Behavioral Patterns</h3>
<dl><dt><b>Chain of Responsibility </b>
<dd>Avoid coupling the sender of a request to its receiver by giving more
than one object a chance to handle the request.  Chain the receiving
objects and pass the request along the chain until an object
handles it.<dt><b>Command </b>
<dd>Encapsulate a request as an object, thereby letting you parameterize
clients with different requests, queue or log requests, and support
undoable operations.<dt><b>Interpreter </b>
<dd>Given a language, define a represention for its grammar along with an
interpreter that uses the representation to interpret sentences in the
language.<dt><b>Iterator </b>
<dd>Provide a way to access the elements of an aggregate object
sequentially without exposing its underlying representation.
<dt><b>Mediator </b>
<dd>Define an object that encapsulates how a set of objects interact.
Mediator promotes loose coupling by keeping objects from referring to
each other explicitly, and it lets you vary their interaction
independently.
<dt><b>Memento </b>
<dd>Without violating encapsulation, capture and externalize an object's
internal state so that the object can be restored to this state later.<dt><b>Observer </b>
<dd>Define a one-to-many dependency between objects so that when one
object changes state, all its dependents are notified and updated
automatically.
<dt><b>State </b>
<dd>Allow an object to alter its behavior when its internal state changes.
The object will appear to change its class.
<dt><b>Strategy </b>
<dd>Define a family of algorithms, encapsulate each one, and make them
interchangeable.  Strategy lets the algorithm vary independently from
clients that use it.
<dt><b>Template Method </b>
<dd>Define the skeleton of an algorithm in an operation, deferring some
steps to subclasses. Template Method lets subclasses redefine
certain steps of an algorithm without changing the algorithm's
structure.
<dt><b>Visitor </b>
<dd>Represent an operation to be performed on the elements of an object
structure.  Visitor lets you define a new operation without changing the
classes of the elements on which it operates.
</dl>
<p>&nbsp;</p></body></html>
